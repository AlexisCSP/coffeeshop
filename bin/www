/* Module dependencies. */
var app = require('../app');
var debug = require('debug')('coffeeshop:server');
var http = require('http');

/* Get port from environment and store in Express. */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/* Create HTTP server and socket.io instance. */
var server = http.createServer(app);
const io = require('socket.io').listen(server);

/* Listen on provided port, on all network interfaces. */
server.listen(port, () => {
  console.log('Server listening at port %d', port);
});
server.on('error', onError);
server.on('listening', onListening);

/** Socket.IO Functionality **/
io.of('/rooms').on('connection', (socket) => {
  socket.on('join room', (room) => {
    if(socket.room)
      socket.leave(socket.room);
    
    socket.room = room;
    socket.join(room);

    io.of('/rooms').in(room).clients((error, clients) => {
      if (error) throw error;
      io.of('/rooms').in(room).emit('user joined room', clients);
    });
  })

  socket.on('disconnect', () => {
    let room = socket.room;
    console.log(`room: ${room}`);
    socket.leave(room);
    io.of('/rooms').in(room).clients((error, clients) => {
      if (error) throw error;
      io.of('/rooms').in(room).emit('user left room', clients);
    });
  })
})


/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event. */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server "listening" event. */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
