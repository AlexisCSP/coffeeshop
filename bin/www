/* Module dependencies. */
var app = require('../app');
var debug = require('debug')('coffeeshop:server');
var http = require('http');

const candidates_controller = require('../controllers/candidateController');

/* Get port from environment and store in Express. */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/* Create HTTP server and socket.io instance. */
var server = http.createServer(app);
const io = require('socket.io').listen(server);

/* Listen on provided port, on all network interfaces. */
server.listen(port, () => {
  console.log('Server listening at port %d', port);
});
server.on('error', onError);
server.on('listening', onListening);

let candidates = {};
let nowPlaying = {};
let roomOwners = {};
/** Socket.IO Functionality **/
io.of('/rooms').on('connection', (socket) => {

  socket.on('join room', (room) => {
    if(socket.room)
      socket.leave(socket.room);

    socket.room = room;
    socket.join(room);

    // Set this new room up
    if (typeof nowPlaying[`${room}`] != 'undefined' && typeof nowPlaying[`${room}`] != 'undefined'){
      socket.emit('play song', nowPlaying[`${room}`].uri);
    }
    socket.emit('update room queue', candidates[`${room}`]);
    socket.emit('update now playing', nowPlaying[`${room}`]);

    // Tell others in room someone joined
    io.of('/rooms').in(room).clients((error, clients) => {
      if (error) throw error;
      io.of('/rooms').in(room).emit('user joined room', clients);
    });
  });

  socket.on('song suggested', (candidate) => {
    let room = socket.room;
    if (!candidates.hasOwnProperty(`${room}`)) { 
      candidates[`${room}`] = [] 
    };
    candidates[`${room}`].push(candidate);

    io.of('/rooms').in(room).emit('update room queue', candidates[`${room}`]);
  });

  socket.on('user voted up', (candidate) => {
    let room = socket.room;

    let i = queue.findIndex( c => c.id == candidate.id );
    queue[i].votes++;

    // Maintain sorted order by votes
    queue.sort((a, b) => b.votes - a.votes);

    io.of('/rooms').in(room).emit('update vote count', queue);
    io.of('/rooms').in(room).emit('update room queue', queue);
  })

  socket.on('user voted down', (candidate) => {
    let room = socket.room;

    let i = queue.findIndex( c => c.id == candidate.id );
    queue[i].votes--;

    // Maintain sorted order by votes
    queue.sort((a, b) => b.votes - a.votes);

    io.of('/rooms').in(room).emit('update vote count', queue);
    io.of('/rooms').in(room).emit('update room queue', queue);
  })

  socket.on('play next song', () => {
    let room = socket.room;
    let queue = candidates[`${room}`];
    let uri = '';

    if (typeof queue != 'undefined' && typeof queue[0] != 'undefined'){
      if (!nowPlaying.hasOwnProperty(`${room}`)) { 
        nowPlaying[`${room}`] = {} 
      };
      nowPlaying[`${room}`] = queue.shift();
      uri = nowPlaying[`${room}`].uri;
      
      io.of('/rooms').in(room).emit('play song', uri);
      io.of('/rooms').in(room).emit('update room queue', queue);
      io.of('/rooms').in(room).emit('update now playing', nowPlaying[`${room}`]);

      nowPlaying[`${room}`]['room'] = room;
      candidates_controller.candidate_create_post(nowPlaying[`${room}`]);
    }
    else{
      console.log('No song in queue to play');
    }
  })

  socket.on('disconnect', () => {
    let room = socket.room;
    socket.leave(room);
    io.of('/rooms').in(room).clients((error, clients) => {
      if (error) throw error;
      io.of('/rooms').in(room).emit('user left room', clients);
      
      if (clients.length < 1){
        // Can delete queue if nobody in room
        // Probably best to keep queue there until room is deleted
        // Keeping for now for easy dev testing
        
        // delete candidates[`${room}`];
      }
    });
  })
})

/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event. */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server "listening" event. */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
