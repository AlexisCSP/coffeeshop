extends layout

block content
  h1 Welcome to Room: #[span#room-key #{room.key}]
  p There are #[span#num-users 0] users in rooms

  a.button(href='/rooms') Back to rooms
  <button onclick="playAudio()" type="button">Play Audio</button>
 
  <script src="/socket.io/socket.io.js"></script>
  <script src="/scripts/rooms.js"></script>
  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  script.

    // Set up the Web Playback SDK
    window.onSpotifyWebPlayerSDKReady = () => {};
    //-   const token = '#{access_token}';
    //-   const player = new Spotify.Player({
    //-     name: 'CoffeeShop',
    //-     getOAuthToken: cb => { cb(token); }
    //-   });

    //-   // Error handling
    //-   player.on('initialization_error', e => console.error(e));
    //-   player.on('authentication_error', e => console.error(e));
    //-   player.on('account_error', e => console.error(e));
    //-   player.on('playback_error', e => console.error(e));

    //-   // Playback status updates
    //-   player.on('player_state_changed', state => {
    //-     console.log(state)
    //-     $('#current-track').attr('src', state.track_window.current_track.album.images[0].url);
    //-     $('#current-track-name').text(state.track_window.current_track.name);
    //-   });

    //-   // Ready
    //-   player.on('ready', data => {
    //-     console.log('Ready with Device ID', data.device_id);
        
    //-     // Play a track using our new device ID
    //-     play(data.device_id);
    //-   });

    //-   // Connect to the player!
    //-   let connected = player.connect();
    //-   if (connected) {
    //-     let state = sdk.getCurrentState();
    //-     if (state == null) {
    //-       // Playback isn't on this device yet
    //-     } else {
    //-       let {
    //-         id,
    //-         uri: track_uri,
    //-         name: track_name,
    //-         duration_ms,
    //-         artists,
    //-         album: {
    //-           name: album_name,
    //-           uri: album_uri,
    //-           images: album_images
    //-         }
    //-       } = state.track_window.current_track;
    //-       console.log(`You're listening to ${track_name} by ${artists[0].name}!`);
    //-     }
    //-   }

    //- }

    // Play a specified track on the Web Playback SDK's device ID
    //- function play(device_id) {
    //-   $.ajax({
    //-   url: "https://api.spotify.com/v1/me/player/play?device_id=" + device_id,
    //-   type: "PUT",
    //-   data: '{"uris": ["spotify:track:5ya2gsaIhTkAuWYEMB0nw5"]}',
    //-   beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + '#{access_token}' );},
    //-   success: function(data) { 
    //-     console.log(data)
    //-   }
    //-   });
    //- }

    async function waitForSpotifyWebPlaybackSDKToLoad () {
      return new Promise(resolve => {
        if (window.Spotify) {
          resolve(window.Spotify);
        } else {
          window.onSpotifyWebPlaybackSDKReady = () => {
            resolve(window.Spotify);
          };
        }
      });
    };

    async function waitUntilUserHasSelectedPlayer (sdk) {
      return new Promise(resolve => {
        let interval = setInterval(async () => {
          let state = await sdk.getCurrentState();
          if (state !== null) {
            resolve(state);
            clearInterval(interval);
          }
        });
      });
    };

    (async () => {
      const { Player } = await waitForSpotifyWebPlaybackSDKToLoad();
      const token = '#{access_token}';
      const sdk = new Player({
        name: "CoffeeShop",
        getOAuthToken: callback => { callback(token); }
      });

      // Error handling
      sdk.addListener('initialization_error', ({ message }) => { console.error(message); });
      sdk.addListener('authentication_error', ({ message }) => { console.error(message); });
      sdk.addListener('account_error', ({ message }) => { console.error(message); });
      sdk.addListener('playback_error', ({ message }) => { console.error(message); });

      sdk.on("player_state_changed", state => {
        // Update UI with playback state changes
      });


      // Ready
      sdk.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);
      });

      // Not Ready
      sdk.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
      });

      let connected = await sdk.connect();
      if (connected) {
        //let state = await selectPlayer(device_id);
        let state = await waitUntilUserHasSelectedPlayer(sdk);
        await sdk.resume();
        await sdk.setVolume(0.5);
        let {
          id,
          uri: track_uri,
          name: track_name,
          duration_ms,
          artists,
          album: {
            name: album_name,
            uri: album_uri,
            images: album_images
          }
        } = state.track_window.current_track;
        console.log(`You're listening to ${track_name} by ${artists[0].name}!`);
      }
    })();
